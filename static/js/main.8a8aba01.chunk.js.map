{"version":3,"sources":["components/Round.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Round","props","round","id","playerCode","resultCode","done","futureRoundClass","currentRound","className","data-round","map","item","index","key","data-index","onClick","pickColorToCode","Game","state","disabled","success","secretCode","selectedColor","rounds","handleNewGame","window","confirm","RandomSecretCode","console","log","document","querySelector","classList","remove","setState","colors","i","push","Math","floor","random","handleChangeSelectedColor","event","target","handleChangeOneColorInPlayerCode","parseInt","parentElement","dataset","spanIndex","getAttribute","newRounds","alert","handleCheckCode","validatePlayerCode","copyState","JSON","parse","stringify","forEach","includes","indexSecretCode","indexOf","length","every","prevState","this","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a8aba01.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Round.scss';\r\n\r\nfunction Round(props) {\r\n    const { id, playerCode, resultCode, done } = props.round;\r\n    let futureRoundClass = false;\r\n    if (id !== props.currentRound && done === false) {\r\n        futureRoundClass = true;\r\n    }\r\n\r\n    return (\r\n        <li className=\"round\" data-round={id}>\r\n            <div className={futureRoundClass ? \"playerRoundCode futureRound\" : \"playerRoundCode\"} data-round={id}>\r\n                <p className=\"roundNumber\">{id}.</p>\r\n                {playerCode.map((item, index) => <span key={index} data-index={index} className={item} onClick={props.pickColorToCode}></span>)}}\r\n            </div>\r\n            <div className={futureRoundClass ? \"resultRoundCode futureRound\" : \"resultRoundCode\"} data-round={id}>\r\n                {resultCode.map((item, index) => <span key={index} data-index={index} className={item}></span>)}\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Round;\r\n","import React from 'react'\r\nimport Round from './Round'\r\nimport './Game.scss'\r\n\r\nclass Game extends React.Component {\r\n    state = {\r\n        disabled: true,\r\n        success: false,\r\n        currentRound: 0,\r\n        secretCode: null,\r\n        selectedColor: 'yellow',\r\n        rounds: [{\r\n            id: 1,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 2,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 3,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 4,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 5,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 6,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 7,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 8,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 9,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 10,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 11,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }, {\r\n            id: 12,\r\n            playerCode: [null, null, null, null, null],\r\n            resultCode: [null, null, null, null, null],\r\n            done: false\r\n        }],\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        if (window.confirm('Are you sure to start a new game?')) {\r\n            const secretCode = this.RandomSecretCode();\r\n            console.log(secretCode);\r\n            document.querySelector('button.newGame').classList.remove('firstOpen');\r\n            this.setState({\r\n                success: false,\r\n                disabled: false,\r\n                currentRound: 0,\r\n                secretCode: secretCode,\r\n                rounds: [{\r\n                    id: 1,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 2,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 3,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 4,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 5,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 6,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 7,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 8,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 9,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 10,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 11,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }, {\r\n                    id: 12,\r\n                    playerCode: [null, null, null, null, null],\r\n                    resultCode: [null, null, null, null, null],\r\n                    done: false\r\n                }]\r\n            });\r\n        }\r\n    }\r\n\r\n    RandomSecretCode = () => {\r\n        const secretCode = [];\r\n        const colors = ['yellow', 'red', 'green', 'blue', 'white', 'orange', 'gray', 'pink'];\r\n        for (let i = 0; i < 5; i++) {\r\n            secretCode.push(colors[Math.floor(Math.random() * 8)]);\r\n        }\r\n        return secretCode;\r\n    }\r\n\r\n    handleChangeSelectedColor = (event) => {\r\n        document.querySelector('div.selectedColor').className = `selectedColor ${event.target.className}`;\r\n        this.setState({\r\n            selectedColor: event.target.className\r\n        })\r\n    }\r\n\r\n    handleChangeOneColorInPlayerCode = (event) => {\r\n        if (parseInt(event.target.parentElement.dataset.round) === this.state.currentRound) {\r\n            const spanIndex = event.target.getAttribute('data-index');\r\n            const newRounds = [...this.state.rounds];\r\n            newRounds[this.state.currentRound - 1].playerCode[spanIndex] = this.state.selectedColor;\r\n            this.setState({\r\n                rounds: newRounds\r\n            })\r\n        }\r\n        else {\r\n            alert(\"Pick color to current round\");\r\n        }\r\n    }\r\n\r\n    handleCheckCode = () => {\r\n        if (this.validatePlayerCode()) {\r\n            const resultCode = [];\r\n            const copyState = JSON.parse(JSON.stringify(this.state))\r\n            const { secretCode, rounds, currentRound } = copyState;\r\n            const playerCode = copyState.rounds[currentRound - 1].playerCode;\r\n\r\n            secretCode.forEach((item, index) => {\r\n                if (item === rounds[currentRound - 1].playerCode[index]) {\r\n                    resultCode.push('black');\r\n                    playerCode[index] = null;\r\n                    secretCode[index] = null;\r\n                }\r\n            })\r\n            playerCode.forEach((item, index) => {\r\n                if (secretCode.includes(item) && item !== null) {\r\n                    resultCode.push('white');\r\n                    const indexSecretCode = secretCode.indexOf(item);\r\n                    secretCode[indexSecretCode] = null;\r\n                }\r\n            })\r\n\r\n            if (resultCode.length < 5) {\r\n                for (let i = resultCode.length; i < 5; i++) {\r\n                    resultCode.push(null);\r\n                }\r\n            }\r\n\r\n            const newRounds = [...this.state.rounds];\r\n            newRounds[this.state.currentRound - 1].resultCode = resultCode;\r\n            newRounds[this.state.currentRound - 1].done = true;\r\n            let success = false;\r\n            if (resultCode.every(item => item === \"black\")) {\r\n                success = true;\r\n                alert('Congratulations! You decript the code');\r\n                this.setState(prevState => ({\r\n                    success,\r\n                    rounds: newRounds,\r\n                }));\r\n            } else {\r\n                this.setState(prevState => ({\r\n                    success,\r\n                    currentRound: prevState.currentRound + 1,\r\n                    rounds: newRounds,\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    validatePlayerCode = () => {\r\n        if (this.state.currentRound > 12) {\r\n            alert('Game is over, try again!');\r\n            return false\r\n        }\r\n        else {\r\n            if (this.state.rounds[this.state.currentRound - 1].playerCode.includes(null)) {\r\n                alert('Fill all 5 fields');\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <header>\r\n                    {this.state.success ? <div className=\"secretCodeShow\">\r\n                        {this.state.secretCode.map((item, index) => <span key={index} data-index={index} className={item}></span>)}\r\n                    </div> : <p>Secret Code</p>}\r\n                    <button className=\"newGame firstOpen\" onClick={this.handleNewGame}>New Game</button>\r\n                </header>\r\n                <main>\r\n                    <ul>\r\n                        {this.state.rounds.map(round => <Round key={round.id} round={round} currentRound={this.state.currentRound} pickColorToCode={this.handleChangeOneColorInPlayerCode} />)}\r\n                    </ul>\r\n                </main>\r\n                <footer>\r\n                    <div className=\"selectedColor yellow\">Selected color</div>\r\n                    <div className=\"pickColor\">\r\n                        <span className=\"yellow\" onClick={this.handleChangeSelectedColor}></span>\r\n                        <span className=\"red\" onClick={this.handleChangeSelectedColor}></span>\r\n                        <span className=\"green\" onClick={this.handleChangeSelectedColor}></span>\r\n                        <span className=\"blue\" onClick={this.handleChangeSelectedColor}></span>\r\n                        <span className=\"white\" onClick={this.handleChangeSelectedColor}></span>\r\n                        <span className=\"orange\" onClick={this.handleChangeSelectedColor}></span>\r\n                        <span className=\"gray\" onClick={this.handleChangeSelectedColor}></span>\r\n                        <span className=\"pink\" onClick={this.handleChangeSelectedColor}></span>\r\n                    </div>\r\n                    <button disabled={this.state.disabled} className=\"checkRound\" onClick={this.handleCheckCode}>Check code</button>\r\n                </footer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}